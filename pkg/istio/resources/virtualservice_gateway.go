package resources

// import (
// 	"github.com/bevyx/remesh/pkg/istio"
// 	knativeistio "github.com/knative/serving/pkg/apis/istio/v1alpha3"
// 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
// )

// func MakeIstioVirtualServiceForGateway(transformedServices []istio.TransformedService, namespace string, gateway string) *[]knativeistio.VirtualService {
// 	virtualServices := make([]knativeistio.VirtualService, 0)
// 	for _, transformedService := range transformedServices {
// 		virtualServices = append(virtualServices, *makeVirtualService(transformedService, namespace, gateway))
// 	}
// 	return &virtualServices
// }

// func makeVirtualService(transformedService istio.TransformedService, namespace string, gateway string) *knativeistio.VirtualService {
// 	return &knativeistio.VirtualService{
// 		TypeMeta: metav1.TypeMeta{
// 			Kind:       "VirtualService",
// 			APIVersion: "networking.istio.io/v1alpha3",
// 		},
// 		ObjectMeta: metav1.ObjectMeta{
// 			Name:      transformedService.Host,
// 			Namespace: namespace,
// 			/*OwnerReferences: []metav1.OwnerReference{
// 				*metav1.NewControllerRef(&entrypoint, schema.GroupVersionKind{
// 					Group:   api.SchemeGroupVersion.Group,
// 					Version: api.SchemeGroupVersion.Version,
// 					Kind:    "VirtualEnvironment",
// 				}),
// 			},*/
// 			Labels: AutoGeneratedLabels,
// 		},
// 		Spec: *makeVirtualServiceSpec(transformedService, namespace, gateway),
// 	}
// }

// func makeVirtualServiceSpec(transformedService istio.TransformedService, namespace string, gateway string) *knativeistio.VirtualServiceSpec {
// 	https := make([]knativeistio.HTTPRoute, 0)
// 	for _, subsetService := range transformedService.ServiceSubsetList {
// 		for _, virtualEnvironment := range subsetService.VirtualEnvironments {
// 			https = append(https, knativeistio.HTTPRoute{
// 				Match: []knativeistio.HTTPMatchRequest{
// 					knativeistio.HTTPMatchRequest{
// 						Headers: map[string]knativeistio.StringMatch{
// 							"ol-route": knativeistio.StringMatch{
// 								Exact: virtualEnvironment,
// 							},
// 						},
// 					},
// 				},
// 				Route: []knativeistio.DestinationWeight{
// 					knativeistio.DestinationWeight{
// 						Destination: knativeistio.Destination{
// 							Host:   transformedService.Host,
// 							Subset: transformedService.Host + "-" + subsetService.SubsetHash,
// 						},
// 					},
// 				},
// 			})
// 		}
// 	}
// 	return &knativeistio.VirtualServiceSpec{
// 		Hosts:    []string{transformedService.Host},
// 		Gateways: []string{gateway, "mesh"},
// 		Http:     https,
// 	}
// }
